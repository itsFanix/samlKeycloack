{
    //If strict is True, then the Toolkit will reject unsigned 
    //or unencrypted messages if it expects them to be singned or encrypted
    "strict" : false,

    //Enable debug mode (outputs errors)
     "debug" : true,


    //Service Provider Data that we are deploying
    "sp": {
        //Identifier of the SP entity (must be a URI)

        "entityId" : "http://localhost:5000/saml",

        // Specifies info about where and how the <AuthnResponse> message MUST be
         // returned to the requester, in this case our SP.
        "assertionConsumerService": {
            // URL Location where the <Response> from the IdP will be returned
            "url" : "http://localhost:5000/acs",
            // SAML protocol binding to be used when returning the <Response> 
            // message. SAML Toolkit supports this endpoint for the 
            // HTTP-POST binding only.
            "binding" : "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST"

        },
        // Specifies info about where and how the <Logout Request/Response> message MUST be sent.
        "singleLogoutService": {
            // URL Location where the <LogoutRequest> from the IdP will be sent (IdP-initiated logout)
            "url": "https://localhost:5000/sls",

            // URL Location where the <LogoutResponse> from the IdP will sent (SP-initiated logout, reply) 
            // OPTIONAL: only specify if different from url parameter 
            //"responseUrl": "https://<sp_domain>/?sls", 
            // SAML protocol binding to be used when returning the <Response>
            // message. SAML Toolkit supports the HTTP-Redirect binding 
            // only for this endpoint.
            "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect"
            
        },
        // Specifies the constraints on the name identifier to be used to 
        // represent the requested subject. 
        // Take a look on src/onelogin/saml2/constants.py to see the NameIdFormat that are supported.
        "NameIDFormat" : "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified",

        // Usually X.509 cert and privateKey of the SP are provided by files placed at 
        // the certs folder. But we can also provide them with the following parameters
        "x509cert" : "",
        "privateKey" : ""

    },

    // Identity Provider Data that we want connected with our SP.
    "idp": {

        // Identifier of the IdP entity (must be a URI)
        "entityId": "http://localhost:8080/realms/your-realm",  //To complete

        // SSO endpoint info of the IdP. (Authentication Request protocol)
        "singleSignOnService": {
            // URL Target of the IdP where the Authentication Request Message 
            // will be sent.
            "url": "http://localhost:8080/realms/your-realm/protocol/saml" ,  //CHANGE

            //SAML protocol binding to be used when returning the response
            "binding": "http://localhost:8080/realms/your-realm/protocol/saml"

        },
        
        //SLO endpoint info of the Idp
        "singleLogoutService": {

            //URL Location where the <> from the Idp will be sent (Idp-initiated logout)
            "url" : "",
            "responseUrl" : "",

            "binding" : ""


        },
        //Public certificate of the IdP
        "x509cert" : ""
       

    }
}